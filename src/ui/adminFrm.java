/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package ui;

import ca.odell.glazedlists.GlazedLists;
import ca.odell.glazedlists.swing.AutoCompleteSupport;
import classes.AnimatingCardLayout;
import classes.ColumnResizer;
import classes.IrisAnimation;
import classes.labelRenderer;
import classes.superCls;
import custom_jPanels.BeveledGradientPanel;
import custom_jPanels.CurvedGradientPanel;
import custom_jPanels.GradientRoundRectButton;
import custom_jPanels.LayeredGradientPanel;
import custom_jPanels.RoundRectGradientPanel;
import custom_jPanels.SimpleGradientPanel;
import custom_jPanels.Translucent;
import custom_jPanels.UserInputsPanel;
import farm.entity.DtSettings;
import farm.entity.DtUserprivileges;
import farm.entity.DtUsers;
import farmTech.util.HibernateUtil;
import java.awt.CardLayout;
import java.awt.HeadlessException;
import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Transaction;
import org.hibernate.Session;

/**
 *
 * @author Kent
 */
public class adminFrm extends javax.swing.JInternalFrame {

    /**
     * Creates new form adminFrm
     */
    
    CardLayout cardlayout;
    private AutoCompleteSupport users=null;
    private String user,password,db_name,dumpfile_path,save_to_path,mysql;
    superCls supclass=new superCls();
    String []UId=new String[1000];  
    private DefaultTableModel user_model;
    
    public adminFrm() {
        initComponents();
        this.setOpaque(false);
        
        getDatabase_settings(1);
        cmbUserId.setModel(searchUser());
//        try{
//                 if(users==null||users.isInstalled()){
//                   users=AutoCompleteSupport.install(cmbUserId, GlazedLists.eventListOf(new superCls().getElements()));
//                 }
//             }catch(Exception ex){
//                 
//             }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AdminPane2 = new Translucent();
        this.repaint();
        jPanel46 = new RoundRectGradientPanel();
        ;
        jPanel41 = new RoundRectGradientPanel();
        jLabel101 = new javax.swing.JLabel();
        jLabel82 = new javax.swing.JLabel();
        txtUfname2 = new javax.swing.JTextField();
        jLabel83 = new javax.swing.JLabel();
        txtUlname = new javax.swing.JTextField();
        jLabel102 = new javax.swing.JLabel();
        jLabel84 = new javax.swing.JLabel();
        txtUIdno = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel85 = new javax.swing.JLabel();
        txtUphone = new javax.swing.JTextField();
        jLabel86 = new javax.swing.JLabel();
        txtUaddress = new javax.swing.JTextField();
        jLabel87 = new javax.swing.JLabel();
        txtUResidence = new javax.swing.JTextField();
        jLabel88 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel89 = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jPasswordField1 = new javax.swing.JTextField();
        cmbPstn = new javax.swing.JComboBox();
        btnadminSave =  new GradientRoundRectButton();
        btnadminEdit =  new GradientRoundRectButton();
        btnadminCancel =  new GradientRoundRectButton();
        jLabel79 = new javax.swing.JLabel();
        cmbUserId = new javax.swing.JComboBox();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel2 = new SimpleGradientPanel();
        chckbxDoc = new javax.swing.JCheckBox();
        chckbxpharmacy = new javax.swing.JCheckBox();
        chckbxRec = new javax.swing.JCheckBox();
        chckrpt = new javax.swing.JCheckBox();
        chckadmin = new javax.swing.JCheckBox();
        chckbxTech = new javax.swing.JCheckBox();
        jPanel38 = new SimpleGradientPanel();
        btnDbRestore =  new GradientRoundRectButton();
        jButton15 =  new GradientRoundRectButton();
        btnDbBckup =  new GradientRoundRectButton();
        jButton16 =  new GradientRoundRectButton();
        jButton17 =  new GradientRoundRectButton();
        jLabel103 = new javax.swing.JLabel();
        jButton36 =  new GradientRoundRectButton();
        jSeparator2 = new javax.swing.JSeparator();
        jPanel47 = new RoundRectGradientPanel();
        ;
        jScrollPane10 = new javax.swing.JScrollPane();
        tableUsers = new javax.swing.JTable();
        jButton14 = new javax.swing.JButton();
        jLabel104 = new javax.swing.JLabel();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);
        setResizable(true);
        setTitle("Administartor Frame");
        setToolTipText("");
        setDoubleBuffered(true);
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ox-cow.png"))); // NOI18N
        setMinimumSize(new java.awt.Dimension(842, 574));

        AdminPane2.setLayout(new java.awt.CardLayout());
        cardlayout=new AnimatingCardLayout(new IrisAnimation()); 
        AdminPane2.setLayout(cardlayout);

        jPanel46.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel46.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jPanel46.setName("card2"); // NOI18N
        jPanel46.setOpaque(false);

        jLabel101.setForeground(new java.awt.Color(255, 0, 51));
        jLabel101.setText("*");

        jLabel82.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jLabel82.setText("First Name:");
        jLabel82.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        txtUfname2.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        txtUfname2.setBorder(null);
        txtUfname2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtUfname2FocusLost(evt);
            }
        });

        jLabel83.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jLabel83.setText("Last Name :");

        txtUlname.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        txtUlname.setBorder(null);

        jLabel102.setForeground(new java.awt.Color(255, 0, 51));
        jLabel102.setText("*");

        jLabel84.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jLabel84.setText("Identification No :");

        txtUIdno.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        txtUIdno.setBorder(null);

        jLabel3.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jLabel3.setText("Sex :");

        jComboBox1.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Female", "Male" }));

        jLabel85.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jLabel85.setText("Telephone No. :");

        txtUphone.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        txtUphone.setBorder(null);
        txtUphone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUphoneActionPerformed(evt);
            }
        });

        jLabel86.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jLabel86.setText("Adrress :");

        txtUaddress.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        txtUaddress.setBorder(null);

        jLabel87.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jLabel87.setText("Email :");

        txtUResidence.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        txtUResidence.setBorder(null);

        jLabel88.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jLabel88.setText("DOB :");

        jDateChooser1.setDate(new Date());
        jDateChooser1.setDateFormatString("dd-MM-yyyy");
        jDateChooser1.setDoubleBuffered(false);

        jLabel89.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jLabel89.setText("User Name :");

        txtUsername.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        txtUsername.setBorder(null);

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jLabel1.setText("Password :");

        jLabel4.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jLabel4.setText("Position :");

        jPasswordField1.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jPasswordField1.setBorder(null);

        cmbPstn.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        cmbPstn.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Administrator", "Farmer", "Collection", "Stores", "Reports" }));
        cmbPstn.setSelectedIndex(-1);
        cmbPstn.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbPstnItemStateChanged(evt);
            }
        });

        btnadminSave.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        btnadminSave.setText("Save ");
        btnadminSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnadminSaveActionPerformed(evt);
            }
        });

        btnadminEdit.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        btnadminEdit.setText("Edit");
        btnadminEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnadminEditActionPerformed(evt);
            }
        });

        btnadminCancel.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        btnadminCancel.setText("Cancel");
        btnadminCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnadminCancelActionPerformed(evt);
            }
        });

        jLabel79.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jLabel79.setText("Search user :");

        cmbUserId.setEditable(true);
        cmbUserId.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        cmbUserId.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        cmbUserId.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbUserIdItemStateChanged(evt);
            }
        });

        jSeparator1.setForeground(new java.awt.Color(0, 0, 0));

        chckbxDoc.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        chckbxDoc.setText("Farmer");

        chckbxpharmacy.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        chckbxpharmacy.setText("Collection");

        chckbxRec.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        chckbxRec.setText("Purchases");

        chckrpt.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        chckrpt.setText("Reports");

        chckadmin.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        chckadmin.setText("Administrator");
        chckadmin.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chckadminItemStateChanged(evt);
            }
        });

        chckbxTech.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        chckbxTech.setText("Stores");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(29, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chckbxDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chckadmin))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(chckbxTech, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chckbxRec, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(chckbxpharmacy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chckrpt, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {chckadmin, chckbxDoc, chckbxpharmacy});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(chckadmin, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(chckbxRec, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(chckbxpharmacy, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(chckbxDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(chckbxTech, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(chckrpt, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel41Layout = new javax.swing.GroupLayout(jPanel41);
        jPanel41.setLayout(jPanel41Layout);
        jPanel41Layout.setHorizontalGroup(
            jPanel41Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel41Layout.createSequentialGroup()
                .addGroup(jPanel41Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel41Layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(jPanel41Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel102)
                            .addComponent(jLabel101))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel41Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel82, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel83, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel84)
                            .addComponent(jLabel3)
                            .addComponent(jLabel85)
                            .addComponent(jLabel86, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel87)
                            .addComponent(jLabel88)
                            .addComponent(jLabel89, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(4, 4, 4)
                        .addGroup(jPanel41Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtUResidence, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtUaddress, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtUphone, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtUIdno, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtUlname, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtUfname2, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel41Layout.createSequentialGroup()
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbPstn, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel41Layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(btnadminSave)
                        .addGap(6, 6, 6)
                        .addComponent(btnadminEdit)
                        .addGap(6, 6, 6)
                        .addComponent(btnadminCancel))
                    .addGroup(jPanel41Layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel41Layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel41Layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jLabel79, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(cmbUserId, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel41Layout.setVerticalGroup(
            jPanel41Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel41Layout.createSequentialGroup()
                .addGroup(jPanel41Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel41Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(jPanel41Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel41Layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(jLabel79))
                            .addComponent(cmbUserId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel41Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtUfname2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel41Layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addGroup(jPanel41Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel101, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel82))))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel41Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel83, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtUlname, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel41Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel84, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtUIdno, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel41Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cmbPstn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel41Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel85, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtUphone, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel41Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel86, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtUaddress, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel41Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel87, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtUResidence, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel41Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel88, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jDateChooser1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel41Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel89, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtUsername, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel41Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPasswordField1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel41Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnadminSave)
                            .addComponent(btnadminEdit)
                            .addComponent(btnadminCancel)))
                    .addGroup(jPanel41Layout.createSequentialGroup()
                        .addGap(147, 147, 147)
                        .addComponent(jLabel102)))
                .addGap(39, 39, 39))
        );

        jPanel38.setFocusable(false);
        jPanel38.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnDbRestore.setForeground(new java.awt.Color(255, 255, 255));
        btnDbRestore.setText("Restore Database to an earlier state");
        btnDbRestore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDbRestoreActionPerformed(evt);
            }
        });
        jPanel38.add(btnDbRestore, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 352, 26));

        jButton15.setForeground(new java.awt.Color(255, 255, 255));
        jButton15.setText("Add New User");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });
        jPanel38.add(jButton15, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 352, 26));

        btnDbBckup.setForeground(new java.awt.Color(255, 255, 255));
        btnDbBckup.setText("Create Database BackUP");
        btnDbBckup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDbBckupActionPerformed(evt);
            }
        });
        jPanel38.add(btnDbBckup, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 352, 26));

        jButton16.setForeground(new java.awt.Color(255, 255, 255));
        jButton16.setText("Edit User-Details");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });
        jPanel38.add(jButton16, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 352, 26));

        jButton17.setForeground(new java.awt.Color(255, 255, 255));
        jButton17.setText("View All Users");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });
        jPanel38.add(jButton17, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 352, 26));
        jPanel38.add(jLabel103, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 170, 17, 20));

        jButton36.setForeground(new java.awt.Color(255, 255, 255));
        jButton36.setText("Clear Database Records");
        jButton36.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton36ActionPerformed(evt);
            }
        });
        jPanel38.add(jButton36, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 350, 30));

        javax.swing.GroupLayout jPanel46Layout = new javax.swing.GroupLayout(jPanel46);
        jPanel46.setLayout(jPanel46Layout);
        jPanel46Layout.setHorizontalGroup(
            jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel46Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel38, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel46Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel41, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel46Layout.setVerticalGroup(
            jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel46Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel46Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel41, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel46Layout.createSequentialGroup()
                        .addComponent(jPanel38, javax.swing.GroupLayout.PREFERRED_SIZE, 539, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        AdminPane2.add(jPanel46, "card2");

        jPanel47.setName("card3"); // NOI18N

        jScrollPane10.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane10.setHorizontalScrollBar(null);
        jScrollPane10.setOpaque(false);

        tableUsers.setAutoCreateRowSorter(true);
        tableUsers.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        tableUsers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7", "Title 8", "Title 9", "Title 10", "Title 11", "Title 12", "Title 13", "Title 14", "Title 15", "Title 16", "Title 17", "Title 18"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableUsers.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tableUsers.setGridColor(new java.awt.Color(204, 204, 204));
        tableUsers.setOpaque(false);
        tableUsers.setRowHeight(17);
        tableUsers.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableUsers.setUpdateSelectionOnSort(false);
        tableUsers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableUsersMouseClicked(evt);
            }
        });
        jScrollPane10.setViewportView(tableUsers);

        jButton14.setText("Close");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jLabel104.setText("Registered System Users :");

        javax.swing.GroupLayout jPanel47Layout = new javax.swing.GroupLayout(jPanel47);
        jPanel47.setLayout(jPanel47Layout);
        jPanel47Layout.setHorizontalGroup(
            jPanel47Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel47Layout.createSequentialGroup()
                .addGroup(jPanel47Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel47Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 866, Short.MAX_VALUE))
                    .addGroup(jPanel47Layout.createSequentialGroup()
                        .addContainerGap(817, Short.MAX_VALUE)
                        .addComponent(jButton14))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel47Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel104, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel47Layout.setVerticalGroup(
            jPanel47Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel47Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel104)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton14)
                .addContainerGap())
        );

        AdminPane2.add(jPanel47, "card3");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(AdminPane2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(AdminPane2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
 public DefaultComboBoxModel searchUser () {                                      
    // TODO add your handling code here:   
     String Idno="";
     DefaultComboBoxModel tmodel =new DefaultComboBoxModel();
    Session session = HibernateUtil.getSessionFactory().openSession();
  try {        
    session.beginTransaction();
    Query q = session.createQuery("FROM DtUsers ");
    List auth=q.list();
    Iterator iterator=auth.iterator();
    while(iterator.hasNext()){
      DtUsers user=(DtUsers)iterator.next();
            String names=user.getFname()+" "+user.getLname();
            tmodel.addElement(names);
            UId[tmodel.getIndexOf(names)]=user.getIdNo();
        }
       session.getTransaction().commit();
    }catch (HibernateException he) {
        JLabel errorFields = new JLabel("<HTML><FONT COLOR = Blue>'"+he.getStackTrace()+"'</FONT></HTML>");
            JOptionPane.showMessageDialog(null,errorFields,"DMS",JOptionPane.ERROR_MESSAGE);

    }finally {
         session.close(); 
      }
      return tmodel;
    }  
    
    
    
    
    public void Users_table_display(int val,String name) {
    try {
        String hql;
        List users;
        Session session = HibernateUtil.getSessionFactory().openSession();
        session.beginTransaction();
        switch(val){
            case 1:
                hql=" FROM DtUsers AS user INNER JOIN user.privileges AS priv";
                break;
            default:
                hql=" FROM DtUsers AS user INNER JOIN user.privileges AS priv";
                break;        
    }
        Query q = session.createQuery(hql);
        
        users = q.list();
        displayResult(users);
        session.getTransaction().commit();
    } catch (HibernateException he) {
        he.printStackTrace();
    }
}
  
    public DtUserprivileges userP(String id){
       Session session = HibernateUtil.getSessionFactory().openSession();
       Transaction tx = null;
       DtUserprivileges details=new DtUserprivileges();
      try{
         tx = session.beginTransaction();
         DtUserprivileges user = (DtUserprivileges)session.get(DtUserprivileges.class, id);
         if(user!=null){
             details=user;
             setUserChckBx(user);
         }else
             setChckBxSelected(false);
         tx.commit();
      }catch (HibernateException e) {
         if (tx!=null) tx.rollback();
         e.printStackTrace(); 
      }finally {
         session.close(); 
      }
      return details;
   }
    
    
    public DtUserprivileges getDatabase_settings(int id){
       Session session = HibernateUtil.getSessionFactory().openSession();
       Transaction tx = null;
       DtUserprivileges details=new DtUserprivileges();
      try{
         tx = session.beginTransaction();
         DtSettings settings = (DtSettings)session.get(DtSettings.class, new Integer(id));
         if(settings!=null){
            mysql=settings.getServer();
            user=settings.getUser();
            password=settings.getPassword();
            db_name=settings.getDbname();
            dumpfile_path=settings.getDumpfilePath();
            save_to_path=settings.getSaveToPath();
         }
         tx.commit();
      }catch (HibernateException e) {
         if (tx!=null) tx.rollback();
         e.printStackTrace(); 
      }finally {
         session.close(); 
      }
      return details;
   }
    
    
    
    private void displayResult(List resultList) {
    Vector tableData = new Vector();
    String header[]={"Active","Name","Gender","IdNo","Phone","Administrator","Farmer","Collection","Sales","Store","Financial_rpts","Farmer_info","Purchases_rpts","",""};
    Vector<String> tableHeaders= new Vector<>();
    tableHeaders.add("Active"); 
    tableHeaders.add("Names");
    tableHeaders.add("Gender");
    tableHeaders.add("IdNo");
    tableHeaders.add("Phone");
    tableHeaders.add("Administrator");
    tableHeaders.add("Farmer");
    tableHeaders.add("Collection");
    tableHeaders.add("Sales");
    tableHeaders.add("Store");
    tableHeaders.add("Financial_rpts");
    tableHeaders.add("Farmer_info");
    tableHeaders.add("Purchases_rpts");
    tableHeaders.add("Collection_rpts");
    tableHeaders.add("Delete");
    for(Object o : resultList) {
        Vector<Object> oneRow = new Vector<>();        
         Object[] li = (Object[])o;
            for(Object liItem:li){ 
                if(liItem instanceof DtUsers){
                DtUsers user=(DtUsers)liItem;                
                if(user.getState().equals("true")){
                     oneRow.add(Boolean.TRUE);
                 }else{
                     oneRow.add(Boolean.FALSE);
                }     
                System.out.println(user.getPrivileges().getUserId());       
                oneRow.add(user.getFname()+" "+user.getLname());
                oneRow.add(user.getGender());
                oneRow.add(user.getIdNo());
                oneRow.add(user.getPhone());
                        
                System.out.println(user.getPrivileges().getUserId());   
                oneRow.add(getState(user.getPrivileges().getUl1()));
                oneRow.add(getState(user.getPrivileges().getUl2()));
                oneRow.add(getState(user.getPrivileges().getUl3()));
                oneRow.add(getState(user.getPrivileges().getUl4()));
                oneRow.add(getState(user.getPrivileges().getUl5()));
                oneRow.add(getState(user.getPrivileges().getUl6()));
                oneRow.add(getState(user.getPrivileges().getUl7()));
                oneRow.add(getState(user.getPrivileges().getUl8()));
                oneRow.add(getState(user.getPrivileges().getUl9()));
                oneRow.add("Delete");
                tableData.add(oneRow);
     }
   }
//        admin_entity user = (admin_entity)o;
         
        
        
    }
    if(resultList.isEmpty()){
       user_model=new DefaultTableModel(new String[20][15],header);   
    }else
        user_model=new DefaultTableModel(tableData, tableHeaders){
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class,java.lang.Boolean.class,java.lang.Boolean.class, java.lang.Boolean.class,java.lang.Boolean.class,java.lang.Boolean.class,java.lang.Boolean.class,java.lang.Boolean.class,java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false,false, false, true, true, true, true, true, true,true,true, true,false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
          };
}
    
    
    public boolean userSearch(String id ){
       boolean state=false;
       Session session = HibernateUtil.getSessionFactory().openSession();
       Transaction tx = null;
      try{
         tx = session.beginTransaction();
         DtUsers user = (DtUsers)session.get(DtUsers.class, id);
         if(user!=null){
             DtUsers details=user;
             setAdminFields(user);
             state=true;
         }else
             clearAdminFields();
         tx.commit();
      }catch (HibernateException e) {
         if (tx!=null) tx.rollback();
         e.printStackTrace(); 
      }finally {
         session.close(); 
      }
      return state;
    }
    
    public void userPrivilege(String id){
       Session session = HibernateUtil.getSessionFactory().openSession();
       Transaction tx = null;
      try{
         tx = session.beginTransaction();
         DtUserprivileges user = (DtUserprivileges)session.get(DtUserprivileges.class, id);
         if(user!=null){
             DtUserprivileges details=user;
             setUserChckBx(user);
         }else
             setChckBxSelected(false);
         tx.commit();
      }catch (HibernateException e) {
         if (tx!=null) tx.rollback();
         e.printStackTrace(); 
      }finally {
         session.close(); 
      }
   }
    
    
    public void Usersearch(String userid ){
       userSearch(userid);
       userPrivilege(userid);
   }
   
   public boolean del_User(String idno){
       Session session = HibernateUtil.getSessionFactory().openSession();
       Transaction tx = null;
       boolean status=false;
      try{
         tx = session.beginTransaction();
         DtUserprivileges userP = (DtUserprivileges)session.get(DtUserprivileges.class, idno);
         DtUsers user = (DtUsers)session.get(DtUsers.class, idno);         
         session.delete(userP);
         session.delete(user);
         tx.commit();
         status=true;
      }catch (HibernateException e) {
         if (tx!=null) tx.rollback();
         e.printStackTrace(); 
      }finally {
         session.close(); 
      }
     return status;
   }
   
//   public boolean del_UserPrivileges(String idno){
//       Session session = HibernateUtil.getSessionFactory().openSession();
//       Transaction tx = null;
//       boolean status=false;
//      try{
//         tx = session.beginTransaction();
//         Query q = session.createQuery("delete from DtUserprivileges u where u.userid==:id");
//         q.setParameter("id", idno);
//         q.executeUpdate();
//         tx.commit();
//         status=true;
//      }catch (HibernateException e) {
//         if (tx!=null) tx.rollback();
//         e.printStackTrace(); 
//      }finally {
//         session.close(); 
//      }
//     return status;
//   }
   
   
   
  public void clearAdminFields(){
     txtUfname2.setText("");
     txtUlname.setText("");
     txtUIdno.setText("");
     txtUphone.setText("");
     txtUaddress.setText("");
     txtUResidence.setText("");
     txtUsername.setText("");
  }
    public void setAdminFields(DtUsers detail){
        txtUfname2.setText(detail.getFname());
//        txtUsname.setText(admin.getUserSname());
        txtUlname.setText(detail.getLname());
        txtUIdno.setText(detail.getIdNo());
        txtUphone.setText(detail.getPhone());
        txtUaddress.setText(detail.getAddress());
        jComboBox1.setSelectedItem(new superCls().getValue(detail.getGender()));
//        jComboBox2.setSelectedItem(new superCls().getValue(detail.getSpeciality()));
        jDateChooser1.setDate(new superCls().StringToDate(detail.getDob()));
        txtUResidence.setText(detail.getEmail());
//        txtUage.setText(admin.getUserAge());
        txtUsername.setText(detail.getUsername());
//        setUserChckBx(detail);
    }
    
  public void EnableAdminFields(boolean value){
     txtUfname2.setEnabled(value);
//     txtUsname.setEnabled(value);
     txtUlname.setEnabled(value);
     txtUIdno.setEnabled(value);
     txtUphone.setEnabled(value);
     txtUaddress.setEnabled(value);
     txtUResidence.setEnabled(value);
//     txtUage.setEnabled(value);
//     txtUsername.setEnabled(false);
  }
public void adminsetFields()
{ String userFname,userLname,idNo,gender,adress,Tphone,email="",speciality="",dob,lf="Texture",username,password,date,UL1,UL2,UL3,UL4,UL5;
    userFname=txtUfname2.getText();
    userLname=txtUlname.getText();
    gender=jComboBox1.getSelectedItem().toString();
    idNo=txtUIdno.getText();
    adress=txtUaddress.getText();
    Tphone=txtUphone.getText();
    email=txtUResidence.getText();
//    speciality=jComboBox2.getSelectedItem().toString();
    dob=new SimpleDateFormat("dd-MM-yyyy").format(jDateChooser1.getDate());
    username=txtUfname2.getText();
    password=txtUfname2.getText();
//    String cpswd=new String(jPasswordField2.getPassword());
    date=new SimpleDateFormat("dd-MM-yyyy").format(new Date());;
    if(chckadmin.isSelected())
    {
      chckbxDoc.setSelected(true);
      chckbxpharmacy.setSelected(true);
      chckbxRec.setSelected(true);
      chckbxTech.setSelected(true);
      chckadmin.setEnabled(true);
      chckrpt.setEnabled(true);
     setChckBx(false);

    }
    else
    { chckadmin.setEnabled(false);
      setChckBx(true);
    }
    UL1=privileges(chckadmin);
    UL2=privileges(chckbxDoc);
    UL3=privileges(chckbxpharmacy);
    UL4=privileges(chckbxRec);
    UL5=privileges(chckbxTech);
    String UL6="DENIED";
    String UL7="DENIED";
    String UL8="DENIED";
    String UL9="DENIED";
    if(!userFname.equals("") && !idNo.equals("")){
       newUser("true",userFname, userLname, gender,idNo, adress,Tphone, email, dob, username,speciality,lf,password,date,UL1,UL2,UL3,UL4,UL5,UL6,UL7,UL8,UL9);
       cmbUserId.setModel(searchUser());
//       JOptionPane.showMessageDialog(null,"New user Added Successfully!","Clinic Management System",JOptionPane.INFORMATION_MESSAGE); 
    }else{
       JOptionPane.showMessageDialog(null,"Please Make sure firstname and idno are filled!","Clinic Management System",JOptionPane.WARNING_MESSAGE); 
    }

}

public void setChckBx(boolean value)
{     chckadmin.setEnabled(value);
      chckbxDoc.setEnabled(value);
      chckbxpharmacy.setEnabled(value);
      chckbxRec.setEnabled(value);
      chckbxTech.setEnabled(value);
      chckrpt.setEnabled(value);
}

public void setChckBxSelected(boolean value)
{     chckadmin.setSelected(value);
      chckbxDoc.setSelected(value);
      chckbxpharmacy.setSelected(value);
      chckbxRec.setSelected(value);
      chckbxTech.setSelected(value);
      chckrpt.setSelected(value);
}

public void setUserChckBx(DtUserprivileges detail)
{     chckadmin.setSelected(SetUlevel(detail.getUl1()));
      chckbxDoc.setSelected(SetUlevel(detail.getUl2()));
      chckbxpharmacy.setSelected(SetUlevel(detail.getUl3()));
      chckbxRec.setSelected(SetUlevel(detail.getUl4()));
      chckbxTech.setSelected(SetUlevel(detail.getUl5()));
      chckrpt.setSelected(SetUlevel(detail.getUl6()));
}

public String privileges(JCheckBox chckbx)
{
    String userId;
    if(chckbx.isSelected())
    {userId="GRANTED";}
    else
    {userId="DENIED";}
   return userId;
}

public boolean SetUlevel(String id)
{
    boolean userId=false;
    if(id.equalsIgnoreCase("GRANTED"))
    {userId=true;}
    else
    {userId=false;}
   return userId;
}
public void updateState(String state,String idno){
        Session session = HibernateUtil.getSessionFactory().openSession();
        Transaction tx = null;
        try{
             tx = session.beginTransaction();
             DtUsers user = (DtUsers)session.get(DtUsers.class, idno);
             if(user!=null){
                 user.setState(state);
                session.update(user);
                tx.commit(); 
             }
            
        }catch (HibernateException e) {
         if (tx!=null) tx.rollback();
            JLabel errorFields = new JLabel("<HTML><FONT COLOR = BLUE>'"+e.getMessage()+"'</FONT></HTML>");	
           JOptionPane.showMessageDialog(null,errorFields,"Clinic Management System",JOptionPane.INFORMATION_MESSAGE); 
        }
        finally {
         session.close(); 
      }
   }
  
  public void updateUL(String type,String ul,String idno){
       Session session = HibernateUtil.getSessionFactory().openSession();
       Transaction tx = null;
      try{
         tx = session.beginTransaction();
         DtUserprivileges userP = (DtUserprivileges)session.get(DtUserprivileges.class, idno);
         if(userP!=null){
         if(type.equals("UL1")){
             userP.setUl1(ul);
         }
         if(type.equals("UL2")){
             userP.setUl2(ul);
         }
         if(type.equals("UL3")){
            userP.setUl3(ul); 
         }
         if(type.equals("UL4")){
             userP.setUl4(ul);
         }
         if(type.equals("UL5")){
            userP.setUl5(ul); 
         }
         if(type.equals("UL6")){
            userP.setUl6(ul); 
         }
         if(type.equals("UL7")){
            userP.setUl7(ul); 
         }
         if(type.equals("UL8")){
            userP.setUl8(ul); 
         }
         if(type.equals("UL9")){
            userP.setUl9(ul); 
         }
          session.update(userP);
            tx.commit(); 
       }
      }catch (HibernateException e) {
         if (tx!=null) tx.rollback();
            JLabel errorFields = new JLabel("<HTML><FONT COLOR = BLUE>'"+e.getMessage()+"'</FONT></HTML>");	
            JOptionPane.showMessageDialog(null,errorFields,"Clinic Management System",JOptionPane.INFORMATION_MESSAGE); 
        }
        finally {
         session.close(); 
      }
   }
   
   public void newUser(String state,String fname, String lname,String gender,String idno,String address,String phone,String email,String DOB,String Username,String speciality,String LF,String Pass,String date,String ul1,String ul2,String ul3,String ul4,String ul5,String ul6,String ul7,String ul8,String ul9){
         Session session = HibernateUtil.getSessionFactory().openSession();
         Transaction tx = null;
         try{
             session.beginTransaction();
             DtUsers user = (DtUsers)session.get(DtUsers.class, idno);
         if(user==null){
             DtUsers user_save=new DtUsers(idno, state, fname, lname, gender, address, phone, email, DOB, Username, speciality, LF, Pass, date) ; 
             DtUserprivileges user_p=new DtUserprivileges(ul1, ul2, ul3, ul4, ul5, ul6, ul7, ul8, ul9,"","");
             user_save.setPrivileges(user_p);
             user_p.setUser(user_save);
             session.save(user_save);
             JLabel errorFields = new JLabel("<HTML><FONT COLOR = BLUE>New User added successfully</FONT></HTML>");
             JOptionPane.showMessageDialog(null,errorFields,"DMS",JOptionPane.INFORMATION_MESSAGE);
         }else{
             user.setAddress(address);
             user.setDate(date);
             user.setDob(DOB);
             user.setEmail(email);
             user.setFname(fname);
             user.setGender(gender);
             user.setIdNo(idno);
             user.setLname(lname);
             user.setLooknFeel(LF);
             user.setPassword(Pass);
             user.setPhone(phone);
             user.setSpeciality(speciality);
             user.setState(state);
             session.update(user);
             JLabel errorFields = new JLabel("<HTML><FONT COLOR = BLUE>User Record Updated successfully</FONT></HTML>");
             JOptionPane.showMessageDialog(null,errorFields,"DMS",JOptionPane.INFORMATION_MESSAGE);
         }
         tx=session.getTransaction();
         tx.commit();
      }catch (HibernateException e) {
         if (tx!=null) tx.rollback();
           e.printStackTrace(); 
      }finally {
         session.close(); 
      }
   }
   
  public void UserPrivileges(String idno,String ul1,String ul2,String ul3,String ul4,String ul5,String ul6,String ul7,String ul8,String ul9){
     Session session = HibernateUtil.getSessionFactory().openSession();
     Transaction tx = null;
     try{
     tx = session.beginTransaction();
     DtUserprivileges user_p=(DtUserprivileges)session.get(DtUserprivileges.class, idno);
     if(user_p==null){
         user_p=new DtUserprivileges(ul1, ul2, ul3, ul4, ul5, ul6, ul7, ul8, ul9,"","");
         session.save(user_p);        
     }else{
         user_p.setUl1(ul1);
         user_p.setUl2(ul2);
         user_p.setUl3(ul3);
         user_p.setUl4(ul4);
         user_p.setUl5(ul5);
         user_p.setUl6(ul6);
         user_p.setUl7(ul7);
         user_p.setUl8(ul8);
         user_p.setUl9(ul9);   
         session.update(user_p);
     }
     tx.commit();
  }catch (HibernateException e) {
     if (tx!=null) tx.rollback();
       e.printStackTrace(); 
  }finally {
     session.close(); 
  }
}    
   
   public void UserLnF(String idno,String LnF){
         Session session = HibernateUtil.getSessionFactory().openSession();
       Transaction tx = null;
      try{
         tx = session.beginTransaction();
         DtUsers user = (DtUsers)session.get(DtUsers.class, idno);
         if(user!=null){
             user.setLooknFeel(LnF); 
             session.update(user);
             tx.commit(); 
         }
     }catch (HibernateException e) {
     if (tx!=null) tx.rollback();
       e.printStackTrace(); 
  }finally {
     session.close(); 
  }
}
   
public static String getAbsolutePath(String path){
       String absolutePathOfFile="";
       try{
               String str =path;// args[0];

		File file = new File(str);
		absolutePathOfFile = file.getAbsolutePath();
       }catch(Exception ex){
           JOptionPane.showMessageDialog(null, ex.getMessage());
       }
       return absolutePathOfFile;
   }
private boolean getState(String value){
     if(value.equals("GRANTED"))
         return true;
     else
         return false;
 }

private String getPermission(String val){
        if(val.equals("true")){
            return "GRANTED";
        }else
            return "DENIED";
            
    }    
    
    public boolean DatabaseBackup(String mysqldumpfile, String dbName,String dbUserName,String dbPassword,String path){
//    Connection conn = DBConnect.getConnection();
      String executeCmd=mysqldumpfile+" -u " +dbUserName +" -p"+dbPassword + " --add-drop-database -B " +dbName +" -r " +path;
      Process runtimeProcess;
      try
      {
         runtimeProcess=Runtime.getRuntime().exec(executeCmd);
         int processComplete=runtimeProcess.waitFor();
         if(processComplete==0)
         {
           JOptionPane.showMessageDialog(null, "BackUp Created SuccessFully","Clinic Management System",JOptionPane.INFORMATION_MESSAGE); 
           return true;
         }else
         {
           JOptionPane.showMessageDialog(null, "Could Not Create Backup","Clinic Management System",JOptionPane.INFORMATION_MESSAGE);  
         }
      }
     catch(IOException | InterruptedException | HeadlessException ex){
         JOptionPane.showMessageDialog(null, ex.getMessage(),"Clinic Management System",JOptionPane.INFORMATION_MESSAGE);  
     }
      return false;
  }
  
  public boolean restoreDb(String mysql,String databaseName,String dbUserName,String dbPassword,String Source){
//    Connection conn = DBConnect.getConnection();
      String[] executeCmd=new String[]{mysql, databaseName, "-u" + dbUserName,"-p" +dbPassword,"-e","source " +Source};
      Process runtimeProcess;
      try{
         runtimeProcess=Runtime.getRuntime().exec(executeCmd);
         int processComplete=runtimeProcess.waitFor();
         if(processComplete==0)
         {
            JLabel errorFields = new JLabel("<HTML><FONT COLOR = BLUE>BackUp Restored SuccessFully.</FONT></HTML>");
           JOptionPane.showMessageDialog(null, errorFields,"Clinic Management System",JOptionPane.INFORMATION_MESSAGE); 
           return true;
         }else
         {JLabel errorFields = new JLabel("<HTML><FONT COLOR = red>Could Not Create Restore Database.</FONT></HTML>");	
           JOptionPane.showMessageDialog(null,  errorFields,"Clinic Management System",JOptionPane.WARNING_MESSAGE);  
         }
      }
     catch(IOException | InterruptedException | HeadlessException ex){
//         ex.printStackTrace();
       JOptionPane.showMessageDialog(null, ex.getMessage(),"Clinic Management System",JOptionPane.INFORMATION_MESSAGE);  
     }
      return false;
  }
    
    private void txtUfname2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtUfname2FocusLost
        // TODO add your handling code here:
        String fname=txtUfname2.getText();
        if(!fname.equals("")){
            txtUsername.setText(fname);
            jPasswordField1.setText(fname);
        }
    }//GEN-LAST:event_txtUfname2FocusLost

    private void txtUphoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUphoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUphoneActionPerformed

    private void cmbPstnItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbPstnItemStateChanged
        // TODO add your handling code here:
        if(cmbPstn.getSelectedItem().toString().equals("Administrator")) {
            setChckBxSelected(true);
            chckadmin.setEnabled(true);
            chckadmin.setSelected(true);
            setChckBx(false);
        }
        if(cmbPstn.getSelectedItem().toString().equals("Farmer")) {
            setChckBxSelected(false);
            chckbxDoc.setSelected(true);
            setChckBx(true);
        }
        if(cmbPstn.getSelectedItem().toString().equals("Collection")) {
            setChckBxSelected(false);
            chckbxpharmacy.setSelected(true);
            setChckBx(true);
        }
        if(cmbPstn.getSelectedItem().toString().equals("Purchases")) {
            setChckBxSelected(false);
            chckbxRec.setSelected(true);
            setChckBx(true);
        }
        if(cmbPstn.getSelectedItem().toString().equals("Stores")) {
            setChckBxSelected(false);
            chckbxTech.setSelected(true);
            setChckBx(true);
        }
        if(cmbPstn.getSelectedItem().toString().equals("Reports")) {
            setChckBxSelected(false);
            chckrpt.setSelected(true);
            setChckBx(true);
        }
    }//GEN-LAST:event_cmbPstnItemStateChanged

    private void btnadminSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnadminSaveActionPerformed
        // TODO add your handling code here:
        if( txtUfname2.getText().equals("") && txtUIdno.getText().equals("")) {
            JOptionPane.showMessageDialog(null,"Please Make important fields are filled","Clinic ManangeMent System",JOptionPane.WARNING_MESSAGE);
        } else{
            adminsetFields();
        }
    }//GEN-LAST:event_btnadminSaveActionPerformed

    private void btnadminEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnadminEditActionPerformed
        // TODO add your handling code here:
        EnableAdminFields(true);
    }//GEN-LAST:event_btnadminEditActionPerformed

    private void btnadminCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnadminCancelActionPerformed
        // TODO add your handling code here:
        clearAdminFields();
        setChckBxSelected(true);
        EnableAdminFields(false);
    }//GEN-LAST:event_btnadminCancelActionPerformed

    private void cmbUserIdItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbUserIdItemStateChanged
        // TODO add your handling code here:
        String user=new superCls().getValue(cmbUserId.getSelectedItem());
        if(cmbUserId.getSelectedIndex()!=-1){
            String userId=UId[cmbUserId.getSelectedIndex()];
            Usersearch(userId);
            //            this.setAdminFields();
        }
    }//GEN-LAST:event_cmbUserIdItemStateChanged

    private void chckadminItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chckadminItemStateChanged
        // TODO add your handling code here:
        if(chckadmin.isSelected()) {
            setChckBxSelected(true);
            setChckBx(false);
        }
    }//GEN-LAST:event_chckadminItemStateChanged

    private void jButton36ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton36ActionPerformed
        // TODO add your handling code here:
        int  result = JOptionPane.showConfirmDialog(this,"This will delete all data from prescription,patientstests,and previous session details Saved","Clinic Management System",JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE );
        if(result==JOptionPane.OK_OPTION){
            //            input.clearTable("dt_psession");
            //            input.clearTable("dt_labtests");
            //            input.clearTable("dt_prescription");
            JOptionPane.showMessageDialog(null,"All Information Successfully Deleted!","Clinic Management System",JOptionPane.OK_OPTION);
        }else{
            return;
        }
    }//GEN-LAST:event_jButton36ActionPerformed

    private void btnDbRestoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDbRestoreActionPerformed
        // TODO add your handling code here:
        int  result = JOptionPane.showConfirmDialog(this,"Restoring Database will undo Current Information Saved","Dairy Management System",JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE );
        //        parser = new ReadWithScanner(getClass().getResourceAsStream("Settings/settings.txt"));
        //        String User=parser.processLineByLine("user");
        //        String pass=parser.processLineByLine("password");
        //        String path=getAbsolutePath(parser.processLineByLine("Backup")); //"D:/java/dbBckUp/clinicBckUp.sql";
        //        String dbName=parser.processLineByLine("databasename");
        //        String mysql=getAbsolutePath(parser.processLineByLine("mysql"));
        //        // terminate saving if user presses "OK" or closes dialog
        if( result == JOptionPane.OK_OPTION ) {
            restoreDb(mysql,db_name,user, password, save_to_path);
            //            btnDbBckup.setEnabled(false);
            //            btnDbRestore.setEnabled(true);
            //            setChckBxSelected(true);
            //            EnableAdminFields(false);
        }
    }//GEN-LAST:event_btnDbRestoreActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        // TODO add your handling code here:
        clearAdminFields();
        setChckBxSelected(true);
        EnableAdminFields(true);
    }//GEN-LAST:event_jButton15ActionPerformed

    private void btnDbBckupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDbBckupActionPerformed
        // TODO add your handling code here:
        try{
            DatabaseBackup(dumpfile_path,db_name,user, password, save_to_path);
        }catch(Exception ex){

        }
    }//GEN-LAST:event_btnDbBckupActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        // TODO add your handling code here:
        EnableAdminFields(true);
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        // TODO add your handling code here:

        CardLayout cardmanager=(CardLayout)(AdminPane2.getLayout());
        cardmanager.show(AdminPane2,jPanel47.getName());
        //        JTable rowTable= new RowNumberTable(tableUsers);
        //        jScrollPane10.setRowHeaderView(rowTable);
        //        jScrollPane10.setCorner(JScrollPane.UPPER_LEFT_CORNER,rowTable.getTableHeader());
        
        Users_table_display(1,"name");
        tableUsers.setModel(user_model);
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                tableUsers.getColumnModel().getColumn(14).setCellRenderer( new labelRenderer());
                ColumnResizer.adjustColumnPreferredWidths(tableUsers);
                tableUsers.revalidate();
                //                tableUsers.repaint();
            }
        });
        this.revalidate();
    }//GEN-LAST:event_jButton17ActionPerformed

    private void tableUsersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableUsersMouseClicked
        // TODO add your handling code here:
        // TODO add your handling code here:
        int row=tableUsers.getSelectedRow();
        int col=tableUsers.getSelectedColumn();
        //        input=new DataEntry();
        String state=supclass.getValue(tableUsers.getValueAt(row, 0));
        String idno=supclass.getValue(tableUsers.getValueAt(row, 3));
        String UL1=supclass.getValue(tableUsers.getValueAt(row, 5));
        String UL2=supclass.getValue(tableUsers.getValueAt(row, 6));
        String UL3=supclass.getValue(tableUsers.getValueAt(row, 7));
        String UL4=supclass.getValue(tableUsers.getValueAt(row, 8));
        String UL5=supclass.getValue(tableUsers.getValueAt(row, 9));
        String UL6=supclass.getValue(tableUsers.getValueAt(row, 10));
        String UL7=supclass.getValue(tableUsers.getValueAt(row, 11));
        String UL8=supclass.getValue(tableUsers.getValueAt(row, 12));
        String UL9=supclass.getValue(tableUsers.getValueAt(row, 13));
        switch(col){
            case 0:
            updateState(state, idno);
            break;
            case 5:
            updateUL("UL1",getPermission(UL1), idno);
            if(UL1.equals("true")){
                updateUL("UL2",getPermission("true"), idno);
                updateUL("UL3",getPermission("true"), idno);
                updateUL("UL4",getPermission("true"), idno);
                updateUL("UL5",getPermission("true"), idno);
                updateUL("UL6",getPermission("true"), idno);
                updateUL("UL7",getPermission("true"), idno);
                updateUL("UL8",getPermission("true"), idno);
                updateUL("UL9",getPermission("true"), idno);
            }
            break;
            case 6:
            updateUL("UL2",getPermission(UL2), idno);
            if(UL1.equals("true")&&UL2.equals("false")){
                updateUL("UL1",getPermission("false"), idno);
            }
            break;
            case 7:
            updateUL("UL3",getPermission(UL3), idno);
            if(UL1.equals("true")&&UL3.equals("false")){
                updateUL("UL1",getPermission("false"), idno);
            }
            break;
            case 8:
            updateUL("UL4",getPermission(UL4), idno);
            if(UL1.equals("true")&&UL4.equals("false")){
                updateUL("UL1",getPermission("false"), idno);
            }
            break;
            case 9:
            updateUL("UL5",getPermission(UL5), idno);
            if(UL1.equals("true")&&UL5.equals("false")){
                updateUL("UL1",getPermission("false"), idno);
            }
            break;
            case 10:
            updateUL("UL6",getPermission(UL6), idno);
            if(UL1.equals("true")&&UL6.equals("false")){
                updateUL("UL1",getPermission("false"), idno);
            }
            break;
            case 11:
            updateUL("UL7",getPermission(UL7), idno);
            if(UL1.equals("true")&&UL7.equals("false")){
                updateUL("UL1",getPermission("false"), idno);
            }
            break;
            case 12:
            updateUL("UL8",getPermission(UL8), idno);
            if(UL1.equals("true")&&UL5.equals("false")){
                updateUL("UL1",getPermission("false"), idno);
            }
            break;
            case 13:
            updateUL("UL9",getPermission(UL9), idno);
            if(UL1.equals("true")&&UL9.equals("false")){
                updateUL("UL1",getPermission("false"), idno);
            }
            break;
            case 14:
            if(del_User(idno)){
                Users_table_display(1,"name");
                tableUsers.setModel(user_model);
            }
            break;
            default:
            break;

        }
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                Users_table_display(1,"name");
                tableUsers.setModel(user_model);
                tableUsers.getColumnModel().getColumn(14).setCellRenderer( new labelRenderer());
                ColumnResizer.adjustColumnPreferredWidths(tableUsers);
                tableUsers.revalidate();
                tableUsers.repaint();
            }
        });
    }//GEN-LAST:event_tableUsersMouseClicked

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        // TODO add your handling code here:
        CardLayout cardmanager=(CardLayout)(AdminPane2.getLayout());
        cardmanager.show(AdminPane2,jPanel46.getName());
        this.revalidate();
        //        cardlayout.show(AdminPane,jPanel44.getName());
    }//GEN-LAST:event_jButton14ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AdminPane2;
    private javax.swing.JButton btnDbBckup;
    private javax.swing.JButton btnDbRestore;
    private javax.swing.JButton btnadminCancel;
    private javax.swing.JButton btnadminEdit;
    private javax.swing.JButton btnadminSave;
    private javax.swing.JCheckBox chckadmin;
    private javax.swing.JCheckBox chckbxDoc;
    private javax.swing.JCheckBox chckbxRec;
    private javax.swing.JCheckBox chckbxTech;
    private javax.swing.JCheckBox chckbxpharmacy;
    private javax.swing.JCheckBox chckrpt;
    private javax.swing.JComboBox cmbPstn;
    private javax.swing.JComboBox cmbUserId;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton36;
    private javax.swing.JComboBox jComboBox1;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel101;
    private javax.swing.JLabel jLabel102;
    private javax.swing.JLabel jLabel103;
    private javax.swing.JLabel jLabel104;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel79;
    private javax.swing.JLabel jLabel82;
    private javax.swing.JLabel jLabel83;
    private javax.swing.JLabel jLabel84;
    private javax.swing.JLabel jLabel85;
    private javax.swing.JLabel jLabel86;
    private javax.swing.JLabel jLabel87;
    private javax.swing.JLabel jLabel88;
    private javax.swing.JLabel jLabel89;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel38;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel46;
    private javax.swing.JPanel jPanel47;
    private javax.swing.JTextField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable tableUsers;
    private javax.swing.JTextField txtUIdno;
    private javax.swing.JTextField txtUResidence;
    private javax.swing.JTextField txtUaddress;
    private javax.swing.JTextField txtUfname2;
    private javax.swing.JTextField txtUlname;
    private javax.swing.JTextField txtUphone;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
}
